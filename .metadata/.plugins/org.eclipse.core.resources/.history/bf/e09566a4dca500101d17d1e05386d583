package com.news.feed.ak.service;

import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.news.feed.ak.dto.FollowRequest;
import com.news.feed.ak.dto.RegisterUserRequest;
import com.news.feed.ak.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService {
	private final UserRepository userRepository;
	private final KafkaTemplate<String, String> kafkaTemplate;
	private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

	public User registerUser(RegisterUserRequest request) {
		User user = User.builder().username(request.getUsername()).email(request.getEmail())
				.password(passwordEncoder.encode(request.getPassword())).build();
		return userRepository.save(user);
	}

	public void followUser(String userId, FollowRequest request) {
		User user = userRepository.findById(userId).orElseThrow();
		User target = userRepository.findById(request.getTargetUserId()).orElseThrow();
		user.getFollowing().add(target.getId());
		target.getFollowers().add(user.getId());
		userRepository.save(user);
		userRepository.save(target);
		kafkaTemplate.send("user-follow-events", user.getUsername() + " followed " + target.getUsername());
	}
	
	
	
	
	public void followUser(String userId, FollowRequest request) {
		User user = userRepository.findById(userId).orElseThrow();
		User target = userRepository.findById(request.getTargetUserId()).orElseThrow();
		user.getFollowing().add(target.getId());
		target.getFollowers().add(user.getId());
		userRepository.save(user);
		userRepository.save(target);
		kafkaTemplate.send("user-follow-events", user.getUsername() + " followed " + target.getUsername());
		kafkaTemplate.send("user-follow-events", user.getUsername() + " unfollowed " + target.getUsername());
	}
	
	
}